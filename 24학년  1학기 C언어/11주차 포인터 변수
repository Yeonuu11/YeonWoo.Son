주소값을 저장하고 싶을 때 쓰는 것
왜? -> 포인터가 없으면 함수를 만드는데에 제약이 많다
다른 지역에 있는 값을 가져오는 것이 불가능하고, 리턴값이 함수마다 하나씩 주어지는데
2개 이상의 값을 되돌려줄수 있는 방법이 함수, 포인터 결합

int형 변수의 주소값은 4비트라서 첫번째 위치만 알면 되니까 첫번째 위치가 변수의 주소값임
그 주소를 저장하는 변수가 포인터변수
배열이나 변수의 위치를 저장하는데에 주로 사용한다

포인터 변수도 변수이기 때문에 선언, 초기화 가능

변수 타입과 변수 이름 사이에 *를 찍어야 한다 <<
int*pnum; << *위치 중요x
pnum=&num
포인터변수는 값을 저장하는게 아니니까 변수가 있는 위치를 저장
& 연산자 < 위치를 알려주는 연산자

포인터 변수의 크기는 주소를 저장하는거라서
포인터 변수 타입이 int든 double이든 상관없이 저장할 주소값 크기에 맞춰진다
위치는 정수로 저장된다
첫번째 주소만 알려줬다고 해도 int형이면 4칸 다 확인을 해봐야 한다
그래서 저장할 변수의 주소값에 맞는 타입과 동일하게 선언해야 한다

* 연산자

변수의 이름을 몰라도 포인터변수를 알고 있다면 그 변수를 가리킬수 있다
*pnum 은 num을 의미, num 대신 *pnum 사용 가능하다.

*pnum = 10 ; < num에 10 저장
printf("%d", *pnum); < *pnum에 저장된 값을 printf로 호출 (num 출력)


